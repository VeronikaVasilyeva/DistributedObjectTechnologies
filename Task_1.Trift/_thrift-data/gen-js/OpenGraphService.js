//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

OpenGraph.OpenGraphService_GetMeta_args = function(args) {
  this.url = null;
  if (args) {
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
OpenGraph.OpenGraphService_GetMeta_args.prototype = {};
OpenGraph.OpenGraphService_GetMeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenGraph.OpenGraphService_GetMeta_args.prototype.write = function(output) {
  output.writeStructBegin('OpenGraphService_GetMeta_args');
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 1);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenGraph.OpenGraphService_GetMeta_result = function(args) {
  this.success = null;
  this.netException = null;
  this.notFoundException = null;
  this.unknownException = null;
  this.metaNotFoundException = null;
  if (args instanceof OpenGraph.NetException) {
    this.netException = args;
    return;
  }
  if (args instanceof OpenGraph.NotFoundException) {
    this.notFoundException = args;
    return;
  }
  if (args instanceof OpenGraph.UnknownException) {
    this.unknownException = args;
    return;
  }
  if (args instanceof OpenGraph.MetaNotFoundException) {
    this.metaNotFoundException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new OpenGraph.OpenGraphMeta(args.success);
    }
    if (args.netException !== undefined && args.netException !== null) {
      this.netException = args.netException;
    }
    if (args.notFoundException !== undefined && args.notFoundException !== null) {
      this.notFoundException = args.notFoundException;
    }
    if (args.unknownException !== undefined && args.unknownException !== null) {
      this.unknownException = args.unknownException;
    }
    if (args.metaNotFoundException !== undefined && args.metaNotFoundException !== null) {
      this.metaNotFoundException = args.metaNotFoundException;
    }
  }
};
OpenGraph.OpenGraphService_GetMeta_result.prototype = {};
OpenGraph.OpenGraphService_GetMeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new OpenGraph.OpenGraphMeta();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.netException = new OpenGraph.NetException();
        this.netException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.notFoundException = new OpenGraph.NotFoundException();
        this.notFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.unknownException = new OpenGraph.UnknownException();
        this.unknownException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaNotFoundException = new OpenGraph.MetaNotFoundException();
        this.metaNotFoundException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpenGraph.OpenGraphService_GetMeta_result.prototype.write = function(output) {
  output.writeStructBegin('OpenGraphService_GetMeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.netException !== null && this.netException !== undefined) {
    output.writeFieldBegin('netException', Thrift.Type.STRUCT, 1);
    this.netException.write(output);
    output.writeFieldEnd();
  }
  if (this.notFoundException !== null && this.notFoundException !== undefined) {
    output.writeFieldBegin('notFoundException', Thrift.Type.STRUCT, 2);
    this.notFoundException.write(output);
    output.writeFieldEnd();
  }
  if (this.unknownException !== null && this.unknownException !== undefined) {
    output.writeFieldBegin('unknownException', Thrift.Type.STRUCT, 3);
    this.unknownException.write(output);
    output.writeFieldEnd();
  }
  if (this.metaNotFoundException !== null && this.metaNotFoundException !== undefined) {
    output.writeFieldBegin('metaNotFoundException', Thrift.Type.STRUCT, 4);
    this.metaNotFoundException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpenGraph.OpenGraphServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
OpenGraph.OpenGraphServiceClient.prototype = {};
OpenGraph.OpenGraphServiceClient.prototype.GetMeta = function(url, callback) {
  this.send_GetMeta(url, callback); 
  if (!callback) {
    return this.recv_GetMeta();
  }
};

OpenGraph.OpenGraphServiceClient.prototype.send_GetMeta = function(url, callback) {
  this.output.writeMessageBegin('GetMeta', Thrift.MessageType.CALL, this.seqid);
  var args = new OpenGraph.OpenGraphService_GetMeta_args();
  args.url = url;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_GetMeta();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

OpenGraph.OpenGraphServiceClient.prototype.recv_GetMeta = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new OpenGraph.OpenGraphService_GetMeta_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.netException) {
    throw result.netException;
  }
  if (null !== result.notFoundException) {
    throw result.notFoundException;
  }
  if (null !== result.unknownException) {
    throw result.unknownException;
  }
  if (null !== result.metaNotFoundException) {
    throw result.metaNotFoundException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetMeta failed: unknown result';
};
