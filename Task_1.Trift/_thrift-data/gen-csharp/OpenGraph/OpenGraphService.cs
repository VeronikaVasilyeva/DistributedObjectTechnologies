/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace OpenGraph
{
  public partial class OpenGraphService {
    public interface Iface {
      OpenGraphMeta GetMeta(string url);
      #if SILVERLIGHT
      IAsyncResult Begin_GetMeta(AsyncCallback callback, object state, string url);
      OpenGraphMeta End_GetMeta(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetMeta(AsyncCallback callback, object state, string url)
      {
        return send_GetMeta(callback, state, url);
      }

      public OpenGraphMeta End_GetMeta(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetMeta();
      }

      #endif

      public OpenGraphMeta GetMeta(string url)
      {
        #if !SILVERLIGHT
        send_GetMeta(url);
        return recv_GetMeta();

        #else
        var asyncResult = Begin_GetMeta(null, null, url);
        return End_GetMeta(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetMeta(AsyncCallback callback, object state, string url)
      #else
      public void send_GetMeta(string url)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetMeta", TMessageType.Call, seqid_));
        GetMeta_args args = new GetMeta_args();
        args.Url = url;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public OpenGraphMeta recv_GetMeta()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetMeta_result result = new GetMeta_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.netException) {
          throw result.NetException;
        }
        if (result.__isset.notFoundException) {
          throw result.NotFoundException;
        }
        if (result.__isset.unknownException) {
          throw result.UnknownException;
        }
        if (result.__isset.metaNotFoundException) {
          throw result.MetaNotFoundException;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetMeta failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetMeta"] = GetMeta_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetMeta_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetMeta_args args = new GetMeta_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetMeta_result result = new GetMeta_result();
        try {
          result.Success = iface_.GetMeta(args.Url);
        } catch (NetException netException) {
          result.NetException = netException;
        } catch (NotFoundException notFoundException) {
          result.NotFoundException = notFoundException;
        } catch (UnknownException unknownException) {
          result.UnknownException = unknownException;
        } catch (MetaNotFoundException metaNotFoundException) {
          result.MetaNotFoundException = metaNotFoundException;
        }
        oprot.WriteMessageBegin(new TMessage("GetMeta", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeta_args : TBase
    {
      private string _url;

      public string Url
      {
        get
        {
          return _url;
        }
        set
        {
          __isset.url = true;
          this._url = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool url;
      }

      public GetMeta_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Url = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeta_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Url != null && __isset.url) {
            field.Name = "url";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Url);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeta_args(");
        bool __first = true;
        if (Url != null && __isset.url) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Url: ");
          __sb.Append(Url);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetMeta_result : TBase
    {
      private OpenGraphMeta _success;
      private NetException _netException;
      private NotFoundException _notFoundException;
      private UnknownException _unknownException;
      private MetaNotFoundException _metaNotFoundException;

      public OpenGraphMeta Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NetException NetException
      {
        get
        {
          return _netException;
        }
        set
        {
          __isset.netException = true;
          this._netException = value;
        }
      }

      public NotFoundException NotFoundException
      {
        get
        {
          return _notFoundException;
        }
        set
        {
          __isset.notFoundException = true;
          this._notFoundException = value;
        }
      }

      public UnknownException UnknownException
      {
        get
        {
          return _unknownException;
        }
        set
        {
          __isset.unknownException = true;
          this._unknownException = value;
        }
      }

      public MetaNotFoundException MetaNotFoundException
      {
        get
        {
          return _metaNotFoundException;
        }
        set
        {
          __isset.metaNotFoundException = true;
          this._metaNotFoundException = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool netException;
        public bool notFoundException;
        public bool unknownException;
        public bool metaNotFoundException;
      }

      public GetMeta_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new OpenGraphMeta();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  NetException = new NetException();
                  NetException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  NotFoundException = new NotFoundException();
                  NotFoundException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  UnknownException = new UnknownException();
                  UnknownException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.Struct) {
                  MetaNotFoundException = new MetaNotFoundException();
                  MetaNotFoundException.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetMeta_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.netException) {
            if (NetException != null) {
              field.Name = "NetException";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              NetException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.notFoundException) {
            if (NotFoundException != null) {
              field.Name = "NotFoundException";
              field.Type = TType.Struct;
              field.ID = 2;
              oprot.WriteFieldBegin(field);
              NotFoundException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.unknownException) {
            if (UnknownException != null) {
              field.Name = "UnknownException";
              field.Type = TType.Struct;
              field.ID = 3;
              oprot.WriteFieldBegin(field);
              UnknownException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.metaNotFoundException) {
            if (MetaNotFoundException != null) {
              field.Name = "MetaNotFoundException";
              field.Type = TType.Struct;
              field.ID = 4;
              oprot.WriteFieldBegin(field);
              MetaNotFoundException.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetMeta_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (NetException != null && __isset.netException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NetException: ");
          __sb.Append(NetException== null ? "<null>" : NetException.ToString());
        }
        if (NotFoundException != null && __isset.notFoundException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NotFoundException: ");
          __sb.Append(NotFoundException== null ? "<null>" : NotFoundException.ToString());
        }
        if (UnknownException != null && __isset.unknownException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UnknownException: ");
          __sb.Append(UnknownException== null ? "<null>" : UnknownException.ToString());
        }
        if (MetaNotFoundException != null && __isset.metaNotFoundException) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("MetaNotFoundException: ");
          __sb.Append(MetaNotFoundException== null ? "<null>" : MetaNotFoundException.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
